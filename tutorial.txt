<-----------index.js file code explanation ----->
step bt step explanation 

1------
import express from "express";
import cors from "cors";
import multer from "multer";
import dotenv from "dotenv";
import { Queue } from "bullmq";
import OpenAI from "openai";
import { OpenAIEmbeddings } from "@langchain/openai";
import { QdrantVectorStore } from "@langchain/qdrant";
ржПржЦрж╛ржирзЗ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржкрзНржпрж╛ржХрзЗржЬржЧрзБрж▓рзЛ ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ:

2------
express тЖТ рж╕рж╛рж░рзНржнрж╛рж░ ржмрж╛ржирж╛ржирзЛрж░ ржЬржирзНржп
cors тЖТ ржлрзНрж░ржирзНржЯржПржирзНржб ржерзЗржХрзЗ API ржХрж▓ ржХрж░рж╛рж░ ржЬржирзНржп
multer тЖТ ржлрж╛ржЗрж▓ (PDF) ржЖржкрж▓рзЛржб ржХрж░рж╛рж░ ржЬржирзНржп
dotenv тЖТ .env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ API Key/Config ржирзЗрзЯрж╛рж░ ржЬржирзНржп
bullmq тЖТ Redis-ржнрж┐рждрзНрждрж┐ржХ Queue рж╕рж┐рж╕рзНржЯрзЗржо
openai тЖТ OpenAI ржПрж░ API ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп
langchain ржПрж░ OpenAIEmbeddings + QdrantVectorStore тЖТ ржЯрзЗржХрзНрж╕ржЯржХрзЗ ржнрзЗржХрзНржЯрж░ ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗ Qdrant DB рждрзЗ рж╕рзНржЯрзЛрж░ ржХрж░рж╛рж░ ржЬржирзНржп

3------
const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});
ЁЯСЙ OpenAI ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ ржЗржирж┐рж╢рж┐рзЯрж╛рж▓рж╛ржЗржЬ ржХрж░рж╛ рж╣рж▓рзЛред

4-----
const queue = new Queue("file-upload-queue", {
  connection: {
    host: "localhost",
    port: 6379,
  },
});
ЁЯСЙ BullMQ Queue ржмрж╛ржирж╛ржирзЛ рж╣рж▓рзЛ, ржпрзЗржЦрж╛ржирзЗ Redis ржЪрж▓ржмрзЗ localhost:6379 ржПред
ржорж╛ржирзЗ тАФ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб рж╣рж▓рзЗ Queue рждрзЗ ржХрж╛ржЬ ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗ, ржЖрж░ Worker рж╕рзЗржЯрж╛ ржкрзНрж░рж╕рзЗрж╕ ржХрж░ржмрзЗред

5-----
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "uploads/");
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, `${uniqueSuffix}-${file.originalname}`);
  },
});
ЁЯСЙ Multer ржжрж┐рзЯрзЗ ржлрж╛ржЗрж▓ рж▓рзЛржХрж╛рж▓ ржлрзЛрж▓рзНржбрж╛рж░рзЗ (uploads/) рж╕рзЗржн рж╣ржЪрзНржЫрзЗред
ржкрзНрж░рждрж┐ржЯрж╛ ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржорзЗрж░ ржЖржЧрзЗ ржПржХржЯрж╛ ржЗржЙржирж┐ржХ timestamp + random number ржпрзЛржЧ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред

6-----
const upload = multer({ storage: storage });
const app = express();
app.use(cors());
ЁЯСЙ upload middleware рждрзИрж░рж┐ рж╣рж▓рзЛред
ЁЯСЙ Express app ржмрж╛ржирж╛ржирзЛ рж╣рж▓рзЛ ржПржмржВ CORS allow ржХрж░рж╛ рж╣рж▓рзЛред

7------
app.post("/upload/pdf", upload.single("pdf"), async (req, res) => {
  await queue.add(
    "file-ready",
    JSON.stringify({
      fileName: req.file.originalname,
      destination: req.file.destination,
      path: req.file.path,
    })
  );
  return res.json({ message: "File uploaded successfully!" });
});
ржпржЦржи /upload/pdf ржП POST ржХрж░рж╛ рж╣ржмрзЗ:
ржлрж╛ржЗрж▓ uploads/ ржлрзЛрж▓рзНржбрж╛рж░рзЗ рж╕рзЗржн рж╣ржмрзЗред
Queue рждрзЗ ржЬржм ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗ (Worker ржкрж░рзЗ рж╕рзЗржЯрж╛ ржкрзНрж░рж╕рзЗрж╕ ржХрж░ржмрзЗ)ред
Response ржпрж╛ржмрзЗ "File uploaded successfully!"


8----
app.get("/chat", async (req, res) => {
  const userQuery = req.query.message;
  console.log("userQuery:", userQuery);

  const embeddings = new OpenAIEmbeddings({
    model: "text-embedding-3-small",
    apiKey: process.env.OPENAI_API_KEY,
  });
  const vectorStore = await QdrantVectorStore.fromExistingCollection(
    embeddings,
    {
      url: "http://localhost:6333",
      collectionName: "langchainjs-testing",
    }
  );

  const ret = vectorStore.asRetriever({ k: 2 });

  ЁЯСЙ ржПржЦрж╛ржирзЗ vectorStore ржерзЗржХрзЗ ржПржХржЯрж╛ retriever ржмрж╛ржирж╛ржирзЛ рж╣ржЪрзНржЫрзЗред
retriever ржПрж░ ржХрж╛ржЬ рж╣рж▓рзЛ: ржЗржЙржЬрж╛рж░рзЗрж░ ржкрзНрж░рж╢рзНржи ржЕржирзБржпрж╛рзЯрзА Qdrant ржбрж╛ржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ рж╕ржмржЪрзЗрзЯрзЗ relevant (ржорж┐рж▓ ржЖржЫрзЗ ржПржоржи) ржбржХрзБржорзЗржирзНржЯ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛ред
{ k: 2 } ржорж╛ржирзЗ тЖТ рзиржЯрж╛ рж╕ржмржЪрзЗрзЯрзЗ ржХрж╛ржЫрж╛ржХрж╛ржЫрж┐ match ржХрж░рж╛ ржбржХрзБржорзЗржирзНржЯ ржлрзЗрж░ржд ржжрзЗржмрзЗред


  const result = await ret.invoke(userQuery);
  ЁЯСЙ ржПржЦрж╛ржирзЗ retriever ржХрзЗ ржмрж▓рж╛ рж╣ржЪрзНржЫрзЗ тЖТ "ржПржЗ ржЗржЙржЬрж╛рж░рзЗрж░ query (ржкрзНрж░рж╢рзНржи) ржЕржирзБржпрж╛рзЯрзА ржорж┐рж▓рзЗ ржпрж╛ржУрзЯрж╛ ржбржХрзБржорзЗржирзНржЯ ржмрзЗрж░ ржХрж░рзЛ"ред
userQuery рж╣рж▓рзЛ ржЗржЙржЬрж╛рж░рзЗрж░ ржжрзЗржУрзЯрж╛ ржкрзНрж░рж╢рзНржиред
result ржП ржерж╛ржХржмрзЗ ржР ржкрзНрж░рж╢рзНржирзЗрж░ рж╕рж╛ржерзЗ ржорж┐рж▓рзЗ ржпрж╛ржУрзЯрж╛ top 2 PDF ржЯрзБржХрж░рж╛ (chunk) ржпрзЗржЧрзБрж▓рзЛ embeddings ржПрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ Qdrant ржерзЗржХрзЗ ржлрзЗржЪ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред

  const SYSTEM_PROMPT = `
  You are helfull AI Assistant who answeres the user query based on the available context from PDF File.
  Context:
  ${JSON.stringify(result)}
  `;

  const chatResult = await client.chat.completions.create({
    model: "gpt-4.1",
    messages: [
      { role: "system", content: SYSTEM_PROMPT },
      { role: "user", content: userQuery },
    ],
  });

ЁЯСЙ ржПржЦрж╛ржирзЗ client.chat.completions.create ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
ржорж╛ржирзЗ тЖТ OpenAI ржПрж░ Chat Completion API ржХрзЗ ржХрж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
model: "gpt-4.1" тЖТ ржПржЦрж╛ржирзЗ ржХрзЛржи ржоржбрзЗрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗ рж╕рзЗржЯрж┐ ржмрж▓рж╛ рж╣рзЯрзЗржЫрзЗ (GPT-4.1)ред
messages тЖТ ржПржЯрж╛ ржПржХржЯрж╛ ржорзЗрж╕рзЗржЬ рж▓рж┐рж╕рзНржЯ (ржХржиржнрж╛рж░рж╕рзЗрж╢ржи рж╣рж┐рж╕рзНржЯрзНрж░рж┐)ред
{ role: "system", content: SYSTEM_PROMPT } тЖТ System Prompt ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред
ржПрждрзЗ retriever ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ context рж░рж╛ржЦрж╛ ржЖржЫрзЗ (PDF ржПрж░ ржЕржВрж╢ржмрж┐рж╢рзЗрж╖), ржпрж╛рждрзЗ AI рж╕рзЗржЗ ржЕржирзБржпрж╛рзЯрзА ржЙрждрзНрждрж░ ржжрзЗрзЯред
{ role: "user", content: userQuery } тЖТ ржПржЦрж╛ржирзЗ ржЗржЙржЬрж╛рж░рзЗрж░ ржЖрж╕рж▓ ржкрзНрж░рж╢рзНржи ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред

ЁЯУМ ржХрж╛ржЬрзЗрж░ ржзрж╛ржк:
AI ржХрзЗ ржкрзНрж░ржержорзЗ ржмрж▓рж╛ рж╣рж▓рзЛ тЖТ "рждрзБржорж┐ ржПржХржЬржи рж╣рзЗрж▓рзНржкржлрзБрж▓ ржЕрзНржпрж╛рж╕рж┐рж╕рзНржЯрзНржпрж╛ржирзНржЯ, ржЖрж░ ржПржЗ context ржЕржирзБржпрж╛рзЯрзА ржЗржЙржЬрж╛рж░рзЗрж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрзЗржмрзЗред"
рждрж╛рж░ржкрж░ ржЗржЙржЬрж╛рж░рзЗрж░ ржЖрж╕рж▓ ржкрзНрж░рж╢рзНржи ржкрж╛ржарж╛ржирзЛ рж╣рж▓рзЛред
ЁЯСЙ ржлрж▓рзЗ AI ржЙрждрзНрждрж░ рждрзИрж░рж┐ ржХрж░ржмрзЗ ржПржмржВ рж╕рзЗржЯрж╛ chatResult ржП ржЪрж▓рзЗ ржЖрж╕ржмрзЗред

  return res.json({
    message: chatResult.choices[0].message.content,
    docs: result,
  });
});
ЁЯСЙ ржПржЦрж╛ржирзЗ ржХрзНрж▓рж╛рзЯрзЗржирзНржЯрзЗрж░ ржХрж╛ржЫрзЗ (ржлрзНрж░ржирзНржЯржПржирзНржбрзЗ) JSON рж░рзЗрж╕ржкржирзНрж╕ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗред
message тЖТ AI ржпрзЗ ржЙрждрзНрждрж░ ржжрж┐рзЯрзЗржЫрзЗ (chatResult.choices[0].message.content) рж╕рзЗржЯрж╛ рж░рж╛ржЦрж╛ рж╣рж▓рзЛред
docs тЖТ retriever ржерзЗржХрзЗ ржЖржирж╛ PDF ржПрж░ relevant ржЕржВрж╢ (context) ржПржХрж╕рж╛ржерзЗ ржлрзЗрж░ржд ржжрзЗржУрзЯрж╛ рж╣рж▓рзЛред


ЁЯСЙ /chat рж░рзБржЯ:
ржЗржЙржЬрж╛рж░рзЗрж░ ржкрзНрж░рж╢рзНржи ржирзЗрзЯрж╛ рж╣рж▓рзЛ req.query.message ржерзЗржХрзЗред
Qdrant DB ржерзЗржХрзЗ ржнрзЗржХрзНржЯрж░ рж╕рж╛рж░рзНржЪ ржХрж░рж╛ рж╣рж▓рзЛ (PDF context ржерзЗржХрзЗ)ред
System Prompt ржмрж╛ржирж╛ржирзЛ рж╣рж▓рзЛ ржпрзЗржЦрж╛ржирзЗ Context inject ржХрж░рж╛ рж╣рж▓рзЛред
OpenAI Chat API ржХрзЗ ржХрж▓ ржХрж░рж╛ рж╣рж▓рзЛ (gpt-4.1 ржоржбрзЗрж▓ ржжрж┐рзЯрзЗ)ред
Response JSON ржЖржХрж╛рж░рзЗ ржлрзЗрж░ржд ржжрзЗржУрзЯрж╛ рж╣рж▓рзЛред

9----
app.get("/", (req, res) => {
  return res.json({ status: "All Good!" });
});
ЁЯСЙ рж╣рзЗрж▓рже ржЪрзЗржХ рж░рзБржЯред

10----
app.listen(8000, () => console.log(`Server started on PORT:${8000}`));
ЁЯСЙ рж╕рж╛рж░рзНржнрж╛рж░ 8000 ржкрзЛрж░рзНржЯрзЗ ржЪрж╛рж▓рзБ рж╣рж▓рзЛред


<---------worker.js file code explanation---------->
import dotenv from "dotenv";
import { Worker } from "bullmq";
import { OpenAIEmbeddings } from "@langchain/openai";
import { QdrantVectorStore } from "@langchain/qdrant";
import { PDFLoader } from "@langchain/community/document_loaders/fs/pdf";
import { CharacterTextSplitter } from "@langchain/textsplitters";
ЁЯСЙ ржПржЦрж╛ржирзЗ ржЖржмрж╛рж░ рж╕ржм dependency ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред
PDFLoader тЖТ PDF ржерзЗржХрзЗ ржЯрзЗржХрзНрж╕ржЯ ржкрзЬрж╛рж░ ржЬржирзНржп
CharacterTextSplitter тЖТ ржЯрзЗржХрзНрж╕ржЯржХрзЗ ржЫрзЛржЯ ржЫрзЛржЯ ржЕржВрж╢рзЗ ржнрж╛ржЧ ржХрж░рж╛рж░ ржЬржирзНржп

const worker = new Worker(
  "file-upload-queue",
  async (job) => {
    const data = JSON.parse(job.data);
    console.log("Job data path:", data.path);
  })
  ЁЯСЙ Worker рждрзИрж░рж┐ рж╣рж▓рзЛред Queue (file-upload-queue) ржерзЗржХрзЗ ржЬржм ржЖрж╕рж▓рзЗржЗ Worker ржЪрж╛рж▓рзБ рж╣ржмрзЗред
ЁЯСЙ ржЖржкрж▓рзЛржб ржХрж░рж╛ ржлрж╛ржЗрж▓рзЗрж░ path рж▓ржЧ ржХрж░рж╛ рж╣рж▓рзЛред

    const loader = new PDFLoader(data.path);
    const docs = await loader.load();
ЁЯСЙ PDF ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рзЗ ржЯрзЗржХрзНрж╕ржЯ ржПржХрзНрж╕ржЯрзНрж░рзНржпрж╛ржХрзНржЯ ржХрж░рж╛ рж╣рж▓рзЛред

    const splitter = new CharacterTextSplitter({
      chunkSize: 1000,
      chunkOverlap: 200,
    });
    const splitDocs = await splitter.splitDocuments(docs);
    console.log("Total Chunks:", splitDocs.length);
ЁЯСЙ PDF ржЯрзЗржХрзНрж╕ржЯржХрзЗ ржЫрзЛржЯ ржЫрзЛржЯ ржЯрзБржХрж░рж╛рзЯ ржнрж╛ржЧ ржХрж░рж╛ рж╣рж▓рзЛ (ржкрзНрж░рждрж┐ ржЪрж╛ржЩрзНржХ рззрзжрзжрзж ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░, рзирзжрзж ржУржнрж╛рж░рж▓рзНржпрж╛ржкрж╕рж╣)ред

    const embeddings = new OpenAIEmbeddings({
      model: "text-embedding-3-small",
      apiKey: process.env.OPENAI_API_KEY,
    });
ЁЯСЙ OpenAI Embeddings рждрзИрж░рж┐ рж╣рж▓рзЛ (ржпрж╛рждрзЗ ржЯрзЗржХрзНрж╕ржЯржХрзЗ ржнрзЗржХрзНржЯрж░рзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рж╛ ржпрж╛рзЯ)ред

    try {
      const vectorStore = await QdrantVectorStore.fromDocuments(
        splitDocs,
        embeddings,
        {
          url: "http://localhost:6333",
          collectionName: "langchainjs-testing",
        }
      );
      console.log(`All docs are added to vector store`);
    } catch (err) {
      console.error("тЭМ Qdrant error:", err);
    }
  ,
  {
    concurrency: 100,
    connection: {
      host: "localhost",
      port: "6379",
    },
  }

ЁЯСЙ ржкрзНрж░рждрж┐ржЯрж╛ PDF ржЪрж╛ржЩрзНржХржХрзЗ ржнрзЗржХрзНржЯрж░ ржмрж╛ржирж┐рзЯрзЗ Qdrant DB рждрзЗ langchainjs-testing collection ржП рж╕рзЗржн ржХрж░рж╛ рж╣рж▓рзЛред
ЁЯСЙ Redis ржПрж░ ржорж╛ржзрзНржпржорзЗ Queue ржорзНржпрж╛ржирзЗржЬ рж╣ржЪрзНржЫрзЗред




<----------------Docker-compose-yml file code explanation----------->
services:
  valkey:
    image: valkey/valkey
    ports:
      - 6379:6379

  qdrant:
    image: qdrant/qdrant
    ports:
      - 6333:6333
ЁЯСЙ ржПржЦрж╛ржирзЗ ржжрзБржЗржЯрж╛ рж╕рж╛рж░рзНржнрж┐рж╕ рж░рж╛ржи рж╣ржЪрзНржЫрзЗ:
valkey тЖТ Redis-compatible in-memory DB (Queue ржПрж░ ржЬржирзНржп ржжрж░ржХрж╛рж░)ред
qdrant тЖТ Vector Database (PDF embeddings рж╕рзНржЯрзЛрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржжрж░ржХрж╛рж░)ред
ЁЯФ╣ Docker рж▓рж╛ржЧржмрзЗ ржирж╛ржХрж┐?

ЁЯСЙ ржПржЗ ржкрзНрж░ржЬрзЗржХрзНржЯрзЗ рзйржЯрж╛ ржЬрж┐ржирж┐рж╕ ржжрж░ржХрж╛рж░:

Express рж╕рж╛рж░рзНржнрж╛рж░ (index.js)
Redis / Valkey (BullMQ queue ржЪрж╛рж▓рж╛ржирзЛрж░ ржЬржирзНржп)
Qdrant (Vector DB ржпрзЗржЦрж╛ржирзЗ embeddings рж░рж╛ржЦрж╛ рж╣ржЪрзНржЫрзЗ)
тЬЕ Express рж╕рж╛рж░рзНржнрж╛рж░ рждрзЛ рждрзБржорж┐ Node ржжрж┐рзЯрзЗ ржЪрж╛рж▓рж╛рждрзЗржЗ ржкрж╛рж░ржмрзЗред
ржХрж┐ржирзНрждрзБ тАФ Redis (Valkey) ржЖрж░ Qdrant ржЗржирж╕рзНржЯрж▓ ржХрж░рждрзЗ рж╣ржмрзЗред

ЁЯСЙ ржПржЦржи ржжрзБржЗржЯрж╛ ржЙржкрж╛рзЯ ржЖржЫрзЗ:
Docker ржжрж┐рзЯрзЗ Redis + Qdrant ржЪрж╛рж▓рж╛ржУ (рж╕рж╣ржЬ, ржПржХ ржХржорж╛ржирзНржбрзЗ рж╕ржм ржЙржарзЗ ржпрж╛ржмрзЗ)ред
Docker ржЫрж╛рзЬрж╛ тАФ Redis ржЖрж░ Qdrant ржЖрж▓рж╛ржжрж╛ ржХрж░рзЗ ржорзНржпрж╛ржирзБрзЯрж╛рж▓рж┐ ржЗржирж╕рзНржЯрж▓ ржХрж░рждрзЗ рж╣ржмрзЗ рждрзЛржорж╛рж░ рж╕рж┐рж╕рзНржЯрзЗржорзЗред

ржорж╛ржирзЗ:
Docker ржирж╛ ржерж╛ржХрж▓рзЗржУ рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж▓ржмрзЗ, ржХрж┐ржирзНрждрзБ рждрзЛржорж╛ржХрзЗ рж▓рзЛржХрж╛рж▓ ржорзЗрж╢рж┐ржирзЗ Redis + Qdrant ржЖрж▓рж╛ржжрж╛ ржХрж░рзЗ ржЪрж╛рж▓рж╛рждрзЗ рж╣ржмрзЗред
Docker ржерж╛ржХрж▓рзЗ docker compose up -d ржжрж┐рж▓рзЗржЗ рж╕ржм рж╕рж╛рж░рзНржнрж┐рж╕ ржПржХрж╕рж╛ржерзЗ ржЪрж▓ржмрзЗред



ЁЯФ╣ ржкрзНрж░ржержорзЗ Queue ржХрзЗржи ржжрж░ржХрж╛рж░?
рждрзЛржорж╛рж░ рж╕рж┐рж╕рзНржЯрзЗржорзЗ рзиржЯрж╛ ржЖрж▓рж╛ржжрж╛ ржХрж╛ржЬ рж╣ржЪрзНржЫрзЗ:
ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб (PDF ржлрж╛ржЗрж▓ рж╕рж╛рж░рзНржнрж╛рж░рзЗ рж╕рзЗржн ржХрж░рж╛)
ржлрж╛ржЗрж▓ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ (PDF ржерзЗржХрзЗ ржЯрзЗржХрзНрж╕ржЯ ржкрзЬрж╛ тЖТ ржЪрж╛ржЩрзНржХ ржХрж░рж╛ тЖТ embeddings ржмрж╛ржирж╛ржирзЛ тЖТ Qdrant ржП рж╕рзЗржн ржХрж░рж╛)

ЁЯСЙ ржПржЦржи ржзрж░рзЛ ржлрж╛ржЗрж▓ржЯрж╛ ржмрзЬ, рзирзжрзж+ ржкрзЗржЬред
ржпржжрж┐ ржЗржЙржЬрж╛рж░ /upload/pdf API ржХрж▓ ржХрж░рзЗ тЖТ ржЖрж░ ржПржХржЗ request ржПрж░ ржнрзЗрждрж░рзЗржЗ ржлрж╛ржЗрж▓ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣рзЯ,
рждрж╛рж╣рж▓рзЗ тАФ
API ржЕржирзЗржХ рж╕ржорзЯ ржирзЗржмрзЗ (timeout рж╣рждрзЗ ржкрж╛рж░рзЗ)ред
рж╕рж╛рж░рзНржнрж╛рж░ ржмрзНрж▓ржХ рж╣рзЯрзЗ ржпрж╛ржмрзЗ (ржЕржирзНржп ржЗржЙржЬрж╛рж░ request рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛)ред

тЬЕ рждрж╛ржЗ BullMQ queue ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред
ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб рж╣ржУрзЯрж╛рж░ ржкрж░ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ response ржжрзЗржУрзЯрж╛ рж╣рзЯ тАФ "File uploaded successfully!"
ржЖрж░ ржЖрж╕рж▓ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржПрж░ ржХрж╛ржЬ queue рждрзЗ ржЬржм ржЖржХрж╛рж░рзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯ
Worker ржЖрж▓рж╛ржжрж╛ ржерзНрж░рзЗржбрзЗ ржзрзАрж░рзЗ рж╕рзБрж╕рзНржерзЗ ржлрж╛ржЗрж▓ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзЗред



ЁЯФ╣ Redis ржХрзЗржи рж▓рж╛ржЧржЫрзЗ?
BullMQ ржХрж╛ржЬ ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж╛ backend storage ржжрж░ржХрж╛рж░, ржпрзЗржЦрж╛ржирзЗ queue ржПрж░ ржЬржмржЧрзБрж▓рзЛ рж╕рзЗржн ржерж╛ржХржмрзЗред
рж╕рзЗржЯрж╛ржЗ рж╣рж▓рзЛ Redis (ржмрж╛ Valkey)ред
Redis ржПрж░ ржХрж╛ржЬржЧрзБрж▓рзЛ:
Queue рждрзЗ ржирждрзБржи ржЬржм ржпрзЛржЧ рж╣рж▓рзЗ рж╕рзЗржЯрж╛ рж╕рзЗржн ржХрж░рзЗред
Worker ржХрзЗ ржмрж▓рзЗ тЖТ тАЬржПржЗ ржирж╛ржУ, ржирждрзБржи ржЬржм ржПрж╕рзЗржЫрзЗ, ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзЛредтАЭ
ржЬржм complete ржмрж╛ fail рж╣рж▓рзЗ рж╕рзЗржЗ рж╕рзНржЯрзЗржЯ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рзЗред
ЁЯСЙ ржорж╛ржирзЗ Redis рж╣рж▓рзЛ ржПржХржЯрж╛ тАЬmiddlemanтАЭ ржпрж╛ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзЗ ржпрзЗ:
ржлрж╛ржЗрж▓ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржПрж░ ржЬржм рж╣рж╛рж░рж┐рзЯрзЗ ржпрж╛ржмрзЗ ржирж╛
ржЬржмрзЗрж░ рж╕рзНржЯрзЗржЯрж╛рж╕ ржорзНржпрж╛ржирзЗржЬ ржХрж░рж╛ ржпрж╛ржмрзЗ (pending, processing, done, failed)


ржПржЗ ржбрж╛рзЯрж╛ржЧрзНрж░рж╛ржорзЗ ржкрзБрж░рзЛ ржлрзНрж▓рзЛржЯрж╛ ржжрзЗржЦрж╛ржирзЛ рж╣рж▓рзЛ ЁЯСЗ
Client (User) тЖТ рж╕рж╛рж░рзНржнрж╛рж░рзЗ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб/ржХрзЛрзЯрзЗрж░рж┐ ржкрж╛ржарж╛рзЯред
Express Server (index.js) тЖТ ржлрж╛ржЗрж▓ рж░рж┐рж╕рж┐ржн ржХрж░рзЗ Queue рждрзЗ ржкрж╛ржарж╛рзЯред
Queue (BullMQ) тЖТ Redis/Valkey ржПрж░ рж╕рж╛ржерзЗ ржорж┐рж▓рзЗ ржЬржм ржорзНржпрж╛ржирзЗржЬ ржХрж░рзЗред
Redis / Valkey тЖТ Queue ржПрж░ рж╕ржм ржЬржм рж╕рзЗржн рж░рж╛ржЦрзЗред
Worker (worker.js) тЖТ Queue ржерзЗржХрзЗ ржЬржм ржирж┐рзЯрзЗ ржлрж╛ржЗрж▓ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рзЗ тЖТ ржЯрзЗржХрзНрж╕ржЯ ржнрж╛ржЧ ржХрж░рзЗ Embedding ржмрж╛ржирж╛рзЯ тЖТ Qdrant ржП ржкрж╛ржарж╛рзЯред
Qdrant DB тЖТ PDF ржЯрзЗржХрзНрж╕ржЯ embeddings рж╕рзЗржн ржХрж░рзЗ рж░рж╛ржЦрзЗред
Express Server тЖТ Qdrant ржерзЗржХрзЗ рж░рж┐рж▓рзЗржнрзЗржирзНржЯ ржХржирзНржЯрзЗржирзНржЯ ржирж┐рзЯрзЗ OpenAI ржПрж░ ржорж╛ржзрзНржпржорзЗ ржЙрждрзНрждрж░ ржмрж╛ржирж╛рзЯред
Client (User) тЖТ ржлрж╛ржЗржирж╛рж▓ ржЙрждрзНрждрж░ ржкрж╛рзЯред
